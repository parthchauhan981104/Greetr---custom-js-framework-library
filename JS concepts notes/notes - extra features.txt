Getters - The get syntax binds an object property to a function that will be called when that property is looked up.
Sometimes it is desirable to allow access to a property that returns a dynamically computed value, or you may want 
to reflect the status of an internal variable without requiring the use of explicit method calls. 
It must have exactly zero parameters. Creates a pseudo-property latest for object obj, which return last item in log.
Getters give you a way to define a property of an object, but they do not calculate the property's value until it is
accessed. A getter defers the cost of calculating the value until the value is needed.
const obj = {
  log: ['a', 'b', 'c'],
  get latest() {
    if (this.log.length === 0) {
      return undefined;
    }
    return this.log[this.log.length - 1];
  }
};
console.log(obj.latest); // expected output: "c"
delete obj.latest; // delete the getter
It is not possible to simultaneously have a getter bound to a property and have that property actually hold a value,
although it is possible to use a getter and a setter in conjunction to create a type of pseudo-property.

Setters - The set syntax binds an object property to a function to be called when there is an attempt to set that 
property. A setter can be used to execute a function whenever a specified property is attempted to be changed.
Defines a pseudo-property current of object language. When current is assigned a value, it updates log with that value:
current is not defined, and any attempts to access it will result in undefined.
const language = {
  set current(name) {
    this.log.push(name);
  },
  log: []
};
language.current = 'EN';
language.current = 'FA';
console.log(language.log); // expected output: Array ["EN", "FA"]
